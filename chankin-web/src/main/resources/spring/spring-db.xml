<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:property-placeholder location="classpath:application.properties" />

	<!-- 配置默认数据源-MYSQL -->
	<bean name="dataSourceMysql" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"
		init-method="init">
		<!--基本属性 url、user、password-->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!--配置初始化大小、最小、最大、-->
		<property name="initialSize" value="1" />
		<property name="maxIdle" value="1" />
		<property name="maxActive" value="20" />

		<!--配置获取连接等待的超时时间-->
		<property name="maxWait" value="60000" />

		<!--配置检测时间间隔，检测时需要关闭控线连接-->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!--配置一个连接在连接池的最小生存时间-->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<!-- 数据库validationQuery检查语句 oracle必须这样配置检查 -->
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!--配置监控统计拦截的filters
			属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
			监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
		-->
		<property name="filters" value="stat" />
	</bean>
	<!--MYSQL数据源-->


	<!-- oracle  配置数据源 -->
	<!--	<bean class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" id="dataSourceOrcl" init-method="init">
			<property name="driverClassName" value="${orcl.jdbc.driver}" />
			<property name="url" value="${orcl.jdbc.url}" />
			<property name="username" value="${orcl.jdbc.username}" />
			<property name="password" value="${orcl.jdbc.password}" />

			&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
			<property name="initialSize" value="10" />
			<property name="minIdle" value="10" />
			<property name="maxActive" value="20" />

			&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
			<property name="maxWait" value="60000" />

			&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
			<property name="timeBetweenEvictionRunsMillis" value="20000" />

			&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
			<property name="minEvictableIdleTimeMillis" value="300000" />

			<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

			&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

			&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
			<property name="filters" value="stat" />
		</bean>-->
	<!--oracle数据源-->

	<!--配置mybatis工厂对象-->
	<bean id="mybatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceMysql" />
		<property name="configLocation" value="classpath:spring/mybatis.xml" />
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>

	<!-- mapper扫描器-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="mybatisSqlSessionFactory" />
		<property name="basePackage" value="com.chankin.dao" />
	</bean>

	<!--transaction control-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceMysql" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!--redis config-->
	<bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" id="jedisFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<!--<property name="password" value="${redis.port}"/>-->
		<property name="usePool" value="true" />
		<property name="database" value="0" />
	</bean>


	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisFactory" />
		<!--定义默认序列化策略-->
		<property name="defaultSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<!--定义key默认序列化策略-->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<!--定义value序列化-->
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>


</beans>